import{Barcode,BarcodePicker,CameraAccess,configure,ScanSettings,SingleImageModeSettings}from"..";import{Logger}from"../lib/logger";import{LazyAttributeConverter}from"./lazyAttributeConverter";import{convertProperty}from"./propertyConverter";import{Attribute,attributes,getSchema}from"./schema";import{assertUnreachable}from"./tsHelper";import{Validator}from"./validator";export class Controller{view;picker;lazyAttributeConverter;scanSettings;viewConnected=false;trackAttributes=true;allSymbologies=Object.values(Barcode.Symbology).filter(t=>typeof t==="string");constructor(t){this.view=t}async viewConnectedCallback(){this.viewConnected=true;this.view.initializeDom();this.initializeAttributeConversionGetter();if(this.lazyAttributeConverter[Attribute.CONFIGURE]){await this.initPicker()}}attributeChangedCallback(t){if(!this.viewConnected||!this.trackAttributes){return}const e=this.view.getAttribute(t);if(e!=null&&!this.validateAttribute(t,e)){return}const i=this.attributeToCamelCase(t);this.applyChangeFromAttributeChange(i)}viewDisconnectedCallback(){this.viewConnected=false;this.picker.destroy();delete this.picker;delete this.scanSettings}applyChangeFromAttributeChange(t){switch(t){case Attribute.ACCESS_CAMERA:if(this.lazyAttributeConverter[Attribute.ACCESS_CAMERA]){this.picker.accessCamera().catch(t=>{Logger.log(Logger.Level.WARN,"Error while accessing the camera:",t)})}else{this.picker.pauseCameraAccess()}break;case Attribute.ENABLE_CAMERA_SWITCHER:this.picker.setCameraSwitcherEnabled(this.lazyAttributeConverter[Attribute.ENABLE_CAMERA_SWITCHER]);break;case Attribute.ENABLE_PINCH_TO_ZOOM:this.picker.setPinchToZoomEnabled(this.lazyAttributeConverter[Attribute.ENABLE_PINCH_TO_ZOOM]);break;case Attribute.ENABLE_TAP_TO_FOCUS:this.picker.setTapToFocusEnabled(this.lazyAttributeConverter[Attribute.ENABLE_TAP_TO_FOCUS]);break;case Attribute.ENABLE_TORCH_TOGGLE:this.picker.setTorchToggleEnabled(this.lazyAttributeConverter[Attribute.ENABLE_TORCH_TOGGLE]);break;case Attribute.GUI_STYLE:this.picker.setGuiStyle(this.lazyAttributeConverter[Attribute.GUI_STYLE]);break;case Attribute.LASER_AREA:this.picker.setLaserArea(this.lazyAttributeConverter[Attribute.LASER_AREA]);break;case Attribute.PLAY_SOUND_ON_SCAN:this.picker.setPlaySoundOnScanEnabled(this.lazyAttributeConverter[Attribute.PLAY_SOUND_ON_SCAN]);break;case Attribute.SCANNING_PAUSED:if(this.lazyAttributeConverter[Attribute.SCANNING_PAUSED]){this.picker.pauseScanning();break}this.picker.resumeScanning().catch(t=>{Logger.log(Logger.Level.WARN,"Error while resuming scanning:",t)});break;case Attribute.TARGET_SCANNING_FPS:this.picker.setTargetScanningFPS(this.lazyAttributeConverter[Attribute.TARGET_SCANNING_FPS]);break;case Attribute.VIBRATE_ON_SCAN:this.picker.setVibrateOnScanEnabled(this.lazyAttributeConverter[Attribute.VIBRATE_ON_SCAN]);break;case Attribute.VIDEO_FIT:this.picker.setVideoFit(this.lazyAttributeConverter[Attribute.VIDEO_FIT]);break;case Attribute.VIEWFINDER_AREA:this.picker.setViewfinderArea(this.lazyAttributeConverter[Attribute.VIEWFINDER_AREA]);break;case Attribute.VISIBLE:this.picker.setVisible(this.lazyAttributeConverter[Attribute.VISIBLE]);break;case Attribute.CAMERA:this.getCameraFromAttribute().then(t=>{this.picker.setActiveCamera(t).catch(t=>{Logger.log(Logger.Level.WARN,"Error while setting the active camera:",t)})}).catch(t=>{Logger.log(Logger.Level.WARN,"Error while getting the camera:",t)});break;case Attribute.CAMERA_TYPE:this.picker.setCameraType(this.lazyAttributeConverter[Attribute.CAMERA_TYPE]).catch(t=>{Logger.log(Logger.Level.WARN,"Error while setting camera type:",t)});break;case Attribute.CAMERA_SETTINGS:this.picker.applyCameraSettings(this.lazyAttributeConverter[Attribute.CAMERA_SETTINGS]).catch(t=>{Logger.log(Logger.Level.WARN,"Error while applying camera settings:",t)});break;case Attribute.SCAN_SETTINGS_BLURRY_RECOGNITION:this.scanSettings.setBlurryRecognitionEnabled(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_BLURRY_RECOGNITION]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_CODE_DIRECTION_HINT:this.scanSettings.setCodeDirectionHint(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_CODE_DIRECTION_HINT]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_CODE_DUPLICATE_FILTER:this.scanSettings.setCodeDuplicateFilter(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_CODE_DUPLICATE_FILTER]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_DEVICE_NAME:this.scanSettings.setDeviceName(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_DEVICE_NAME]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_ENABLED_SYMBOLOGIES:this.onEnabledSymbologiesChanged();break;case Attribute.SCAN_SETTINGS_GPU_ACCELERATION:this.scanSettings.setGpuAccelerationEnabled(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_GPU_ACCELERATION]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_MAX_NUMBER_OF_CODES_PER_FRAME:this.scanSettings.setMaxNumberOfCodesPerFrame(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_MAX_NUMBER_OF_CODES_PER_FRAME]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_RECOGNITION_MODE:this.scanSettings.setRecognitionMode(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_RECOGNITION_MODE]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_SEARCH_AREA:this.scanSettings.setSearchArea(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_SEARCH_AREA]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.SCAN_SETTINGS_TEXT_RECOGNITION_SETTINGS:this.scanSettings.setTextRecognitionSettings(this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_TEXT_RECOGNITION_SETTINGS]);this.picker.applyScanSettings(this.scanSettings);break;case Attribute.CONFIGURE:if(this.lazyAttributeConverter[Attribute.CONFIGURE]){this.initPicker().catch(t=>{Logger.log(Logger.Level.WARN,"Error while initializing barcode picker:",t)})}break;case Attribute.SINGLE_IMAGE_MODE_SETTINGS:case Attribute.CONFIGURE_ENGINE_LOCATION:case Attribute.CONFIGURE_LICENSE_KEY:case Attribute.CONFIGURE_HIGH_QUALITY_BLURRY_RECOGNITION:case Attribute.CONFIGURE_LOAD_TEXT_RECOGNITION:case Attribute.CONFIGURE_PRELOAD_BLURRY_RECOGNITION:case Attribute.CONFIGURE_PRELOAD_ENGINE:break;default:assertUnreachable(t);break}}async initPicker(){if(this.picker!=null){return}this.validateAllAttributes();try{await configure(this.lazyAttributeConverter[Attribute.CONFIGURE_LICENSE_KEY],{engineLocation:this.lazyAttributeConverter[Attribute.CONFIGURE_ENGINE_LOCATION],highQualityBlurryRecognition:this.lazyAttributeConverter[Attribute.CONFIGURE_HIGH_QUALITY_BLURRY_RECOGNITION],loadTextRecognition:this.lazyAttributeConverter[Attribute.CONFIGURE_LOAD_TEXT_RECOGNITION],preloadBlurryRecognition:this.lazyAttributeConverter[Attribute.CONFIGURE_PRELOAD_BLURRY_RECOGNITION],preloadEngine:this.lazyAttributeConverter[Attribute.CONFIGURE_PRELOAD_ENGINE]});this.picker=new Proxy(await BarcodePicker.create(this.view.root,{accessCamera:this.lazyAttributeConverter[Attribute.ACCESS_CAMERA],camera:await this.getCameraFromAttribute(),cameraType:this.lazyAttributeConverter[Attribute.CAMERA_TYPE],enableCameraSwitcher:this.lazyAttributeConverter[Attribute.ENABLE_CAMERA_SWITCHER],enablePinchToZoom:this.lazyAttributeConverter[Attribute.ENABLE_PINCH_TO_ZOOM],enableTapToFocus:this.lazyAttributeConverter[Attribute.ENABLE_TAP_TO_FOCUS],enableTorchToggle:this.lazyAttributeConverter[Attribute.ENABLE_TORCH_TOGGLE],playSoundOnScan:this.lazyAttributeConverter[Attribute.PLAY_SOUND_ON_SCAN],vibrateOnScan:this.lazyAttributeConverter[Attribute.VIBRATE_ON_SCAN],scanningPaused:this.lazyAttributeConverter[Attribute.SCANNING_PAUSED],guiStyle:this.lazyAttributeConverter[Attribute.GUI_STYLE],targetScanningFPS:this.lazyAttributeConverter[Attribute.TARGET_SCANNING_FPS],videoFit:this.lazyAttributeConverter[Attribute.VIDEO_FIT],visible:this.lazyAttributeConverter[Attribute.VISIBLE],viewfinderArea:this.lazyAttributeConverter[Attribute.VIEWFINDER_AREA],laserArea:this.lazyAttributeConverter[Attribute.LASER_AREA],singleImageModeSettings:await this.getSingleImageModeSettings()}),this.getBarcodePickerProxyHandler())}catch(t){return this.handleException(t)}this.scanSettings=new ScanSettings({textRecognitionSettings:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_TEXT_RECOGNITION_SETTINGS],recognitionMode:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_RECOGNITION_MODE],blurryRecognition:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_BLURRY_RECOGNITION],codeDirectionHint:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_CODE_DIRECTION_HINT],codeDuplicateFilter:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_CODE_DUPLICATE_FILTER],deviceName:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_DEVICE_NAME],enabledSymbologies:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_ENABLED_SYMBOLOGIES],gpuAcceleration:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_GPU_ACCELERATION],maxNumberOfCodesPerFrame:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_MAX_NUMBER_OF_CODES_PER_FRAME],searchArea:this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_SEARCH_AREA]});this.picker.applyScanSettings(this.scanSettings);this.picker.on("ready",this.dispatchPickerEvent.bind(this,"ready"));this.picker.on("submitFrame",this.dispatchPickerEvent.bind(this,"submitFrame"));this.picker.on("processFrame",this.dispatchPickerEvent.bind(this,"processFrame"));this.picker.on("scan",this.dispatchPickerEvent.bind(this,"scan"));this.picker.on("scanError",this.dispatchPickerEvent.bind(this,"scanError"))}getBarcodePickerProxyHandler(){let t;let e;const i=this;function r(e){if(t==null){t=new Proxy(e["gui"],{set:(t,e,r)=>{Reflect.set(t,e,r);i.onPickerPropertyUpdate.call(i,{origin:"gui",key:e,newValue:r});return true}})}return t}function a(t){if(e==null){e=new Proxy(t["cameraManager"],{set:(t,e,r)=>{Reflect.set(t,e,r);i.onPickerPropertyUpdate.call(i,{origin:"cameraManager",key:e,newValue:r});return true}})}return e}return{get:(t,e)=>{if(e==="gui"){return r(t)}if(e==="cameraManager"){return a(t)}if(e==="applyScanSettings"){return i=>{Reflect.apply(Reflect.get(t,e),t,[i]);this.onScannerNewScanSettings(i)}}return Reflect.get(t,e)},set:(t,e,i)=>{Reflect.set(t,e,i);this.onPickerPropertyUpdate({key:e,origin:"picker",newValue:i});return true}}}onScannerNewScanSettings(t){const e=Object.values(Barcode.Symbology).filter(t=>typeof t==="string");const i=[{key:Attribute.SCAN_SETTINGS_BLURRY_RECOGNITION,newValue:t.isBlurryRecognitionEnabled()},{key:Attribute.SCAN_SETTINGS_CODE_DIRECTION_HINT,newValue:t.getCodeDirectionHint()},{key:Attribute.SCAN_SETTINGS_CODE_DUPLICATE_FILTER,newValue:t.getCodeDuplicateFilter()},{key:Attribute.SCAN_SETTINGS_DEVICE_NAME,newValue:t.getDeviceName()},{key:Attribute.SCAN_SETTINGS_ENABLED_SYMBOLOGIES,newValue:e.reduce((e,i)=>{if(t.isSymbologyEnabled(i)){e.push(Barcode.Symbology.toJSONName(i))}return e},[])},{key:Attribute.SCAN_SETTINGS_GPU_ACCELERATION,newValue:t.isGpuAccelerationEnabled()},{key:Attribute.SCAN_SETTINGS_MAX_NUMBER_OF_CODES_PER_FRAME,newValue:t.getMaxNumberOfCodesPerFrame()},{key:Attribute.SCAN_SETTINGS_RECOGNITION_MODE,newValue:t.getRecognitionMode()},{key:Attribute.SCAN_SETTINGS_SEARCH_AREA,newValue:t.getSearchArea()},{key:Attribute.SCAN_SETTINGS_TEXT_RECOGNITION_SETTINGS,newValue:t.getTextRecognitionSettings()}];i.forEach(t=>{this.onPickerPropertyUpdate({origin:"scanner",...t})})}initializeAttributeConversionGetter(){this.lazyAttributeConverter=new LazyAttributeConverter(getSchema(),this.view)}async getCameraFromAttribute(){let t;const e=this.lazyAttributeConverter[Attribute.CAMERA];if(e?.deviceId!=null){const i=await CameraAccess.getCameras();const r=e.deviceId;t=i.find(t=>t.deviceId===r);if(t==null){Logger.log(Logger.Level.WARN,`Could not find camera with id "${r}", will use default camera.`)}}return t}onEnabledSymbologiesChanged(){const t=this.lazyAttributeConverter[Attribute.SCAN_SETTINGS_ENABLED_SYMBOLOGIES];this.allSymbologies.forEach(e=>{const i=t.includes(e);this.scanSettings.getSymbologySettings(e).setEnabled(i)});this.picker.applyScanSettings(this.scanSettings)}onPickerPropertyUpdate(t){const e={gui:{customLaserArea:[Attribute.LASER_AREA],customViewfinderArea:[Attribute.VIEWFINDER_AREA]},cameraManager:{activeCamera:[Attribute.CAMERA,Attribute.CAMERA_TYPE],cameraSwitcherEnabled:[Attribute.ENABLE_CAMERA_SWITCHER],torchToggleEnabled:[Attribute.ENABLE_TORCH_TOGGLE],tapToFocusEnabled:[Attribute.ENABLE_TAP_TO_FOCUS],pinchToZoomEnabled:[Attribute.ENABLE_PINCH_TO_ZOOM]}};const i=e[t.origin]?.[t.key]??[t.key];this.trackAttributes=false;i.forEach(e=>{if(attributes.includes(e)){if(t.newValue==null){this.view.removeAttribute(e)}else{this.view.setAttribute(e,convertProperty(getSchema()[e],t.newValue))}}});this.trackAttributes=true}async getSingleImageModeSettings(){const t={};if(this.lazyAttributeConverter[Attribute.SINGLE_IMAGE_MODE_SETTINGS]!=null){t.desktop={...SingleImageModeSettings.defaultDesktop,...this.lazyAttributeConverter[Attribute.SINGLE_IMAGE_MODE_SETTINGS].desktop??{}};t.mobile={...SingleImageModeSettings.defaultMobile,...this.lazyAttributeConverter[Attribute.SINGLE_IMAGE_MODE_SETTINGS].mobile??{}}}await this.view.waitOnChildrenReady();["mobile","desktop"].forEach(e=>{["informationElement","buttonElement"].forEach(i=>{const r=this.view.querySelector(`*[slot="singleImageModeSettings.${e}.${i}"]`);if(r!=null&&t[e]!=null){t[e][i]=r}})});return t}dispatchPickerEvent(t,e){const i=new CustomEvent(t,{detail:e});this.view.dispatchCustomEvent(i)}validateAllAttributes(){const t=Array.from(this.view.getAttributes());t.forEach(t=>{if(attributes.includes(t.name)){this.validateAttribute(t.name,t.value)}})}validateAttribute(t,e){const i=this.attributeToCamelCase(t);let r;switch(i){case Attribute.ACCESS_CAMERA:case Attribute.CONFIGURE:case Attribute.CONFIGURE_HIGH_QUALITY_BLURRY_RECOGNITION:case Attribute.CONFIGURE_LOAD_TEXT_RECOGNITION:case Attribute.CONFIGURE_PRELOAD_BLURRY_RECOGNITION:case Attribute.CONFIGURE_PRELOAD_ENGINE:case Attribute.ENABLE_CAMERA_SWITCHER:case Attribute.ENABLE_PINCH_TO_ZOOM:case Attribute.ENABLE_TAP_TO_FOCUS:case Attribute.ENABLE_TORCH_TOGGLE:case Attribute.PLAY_SOUND_ON_SCAN:case Attribute.SCANNING_PAUSED:case Attribute.VIBRATE_ON_SCAN:case Attribute.VISIBLE:case Attribute.SCAN_SETTINGS_BLURRY_RECOGNITION:case Attribute.SCAN_SETTINGS_GPU_ACCELERATION:r=Validator.isBooleanAttribute;break;case Attribute.TARGET_SCANNING_FPS:case Attribute.SCAN_SETTINGS_CODE_DUPLICATE_FILTER:case Attribute.SCAN_SETTINGS_MAX_NUMBER_OF_CODES_PER_FRAME:r=Validator.isIntegerAttribute;break;case Attribute.SCAN_SETTINGS_CODE_DIRECTION_HINT:r=Validator.isValidCodeDirection;break;case Attribute.SCAN_SETTINGS_RECOGNITION_MODE:r=Validator.isValidRecognitionMode;break;case Attribute.SCAN_SETTINGS_TEXT_RECOGNITION_SETTINGS:r=Validator.isValidTextRecognitionSettingsObject;break;case Attribute.CAMERA_TYPE:r=Validator.isValidCameraType;break;case Attribute.GUI_STYLE:r=Validator.isValidGuiStyle;break;case Attribute.VIDEO_FIT:r=Validator.isValidVideoFit;break;case Attribute.SCAN_SETTINGS_ENABLED_SYMBOLOGIES:r=Validator.isValidJsonArray;break;case Attribute.VIEWFINDER_AREA:case Attribute.LASER_AREA:case Attribute.SCAN_SETTINGS_SEARCH_AREA:r=Validator.isValidSearchAreaAttribute;break;case Attribute.CAMERA:r=Validator.isValidCameraObject;break;case Attribute.CAMERA_SETTINGS:r=Validator.isValidCameraSettingsObject;break;case Attribute.SINGLE_IMAGE_MODE_SETTINGS:r=Validator.isValidSingleImageModeSettingsObject;break;case Attribute.CONFIGURE_ENGINE_LOCATION:case Attribute.CONFIGURE_LICENSE_KEY:case Attribute.SCAN_SETTINGS_DEVICE_NAME:r=()=>true;break;default:assertUnreachable(i);break}if(!r(e)){Logger.log(Logger.Level.WARN,`Invalid value for attribute "${i}": "${e}". ${Validator.expectationMessage.get(r)??""}`);return false}return true}attributeToCamelCase(t){const e=attributes.findIndex(e=>e.toLowerCase()===t.toLowerCase());return attributes[e]}handleException(t){Logger.log(Logger.Level.ERROR,t)}}