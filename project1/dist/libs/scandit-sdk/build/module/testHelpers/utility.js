import{EventEmitter}from"eventemitter3";import*as sinon from"sinon";import{BrowserHelper,Camera,CameraAccess,configure}from"..";export async function wait(e){return new Promise(t=>{setTimeout(t,e)})}export function fakeGetCameras(e,t,r){CameraAccess.getCameras.restore?.();sinon.stub(CameraAccess,"getCameras").resolves(Array.from(Array(e),(e,s)=>{const n=t?.[s]??Camera.Type.BACK;return{deviceId:(s+1).toString(),label:r?.[s]??`Fake Camera Device (${n})`,cameraType:n}}))}export async function fakeFullCompatibleBrowser(e=true,t=[]){const r={stop:sinon.stub(),addEventListener:sinon.stub(),removeEventListener:sinon.stub(),applyConstraints:sinon.stub().resolves(),getCapabilities:sinon.stub().returns({}),getConstraints:sinon.stub().returns({}),getSettings:()=>({width:4,height:4})};class s extends EventEmitter{}const n=new EventEmitter;Object.defineProperty(navigator,"mediaDevices",{value:{getUserMedia:()=>Promise.resolve({getTracks:()=>[r],getVideoTracks:()=>[r]}),addEventListener:(e,t)=>{n.removeAllListeners(e);n.on(e,t)},dispatchEvent:e=>{n.emit(e.type);return true}},configurable:true});navigator.mediaDevices.enumerateDevices=()=>Promise.resolve(t);URL.createObjectURL=sinon.stub();BrowserHelper.checkBrowserCompatibility=()=>({fullSupport:true,scannerSupport:true,missingFeatures:[]});if(e){await configure("#".repeat(64),{preloadBlurryRecognition:false,preloadEngine:false})}}