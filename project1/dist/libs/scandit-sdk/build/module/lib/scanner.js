import{EventEmitter}from"eventemitter3";import{blurryRecognitionPreloader,configurePhase,dataCaptureLoader}from"../index";import{BrowserHelper}from"./browserHelper";import{CustomError}from"./customError";import{DataCaptureLoader}from"./dataCaptureLoader";import{ImageSettings}from"./imageSettings";import{Logger}from"./logger";import{Parser}from"./parser";import{ScanResult}from"./scanResult";import{ScanSettings}from"./scanSettings";import{UnsupportedBrowserError}from"./unsupportedBrowserError";class ScannerEventEmitter extends EventEmitter{}export class Scanner{static workerScanRequestId=0;dataCaptureWorker;eventEmitter;scanSettings;imageSettings;workerParseRequestId;workerScanQueueLength;isReadyToWork;licenseKeyFeatures;imageDataConversionContext;activeBlurryRecognitionSymbologies;blurryRecognitionAvailable;constructor({scanSettings:e=new ScanSettings,imageSettings:t}={}){const r=BrowserHelper.checkBrowserCompatibility();if(!r.scannerSupport){throw new UnsupportedBrowserError(r)}if(configurePhase!=="done"){throw new CustomError({name:"LibraryNotConfiguredError",message:configurePhase==="started"?`The library has not completed its configuration yet, please call 'configure' and wait for the returned\n            promise's resolution`:`The library was not configured yet, 'configure' must be called with valid parameters before instantiating\n            the Scanner`})}this.eventEmitter=new EventEmitter;this.isReadyToWork=false;this.workerScanQueueLength=0;this.workerParseRequestId=0;this.dataCaptureWorker=dataCaptureLoader.getDataCaptureWorker();this.dataCaptureWorker.onmessage=this.dataCaptureWorkerOnMessage.bind(this);DataCaptureLoader.load(this.dataCaptureWorker);this.activeBlurryRecognitionSymbologies=new Set;this.blurryRecognitionAvailable=false;this.applyScanSettings(e);if(t!=null){this.applyImageSettings(t)}blurryRecognitionPreloader.on("blurryTablesUpdate",this.handleBlurryTablesUpdate.bind(this))}static ready(){}destroy(){if(this.dataCaptureWorker!=null){dataCaptureLoader.returnDataCaptureWorker(this.dataCaptureWorker)}this.eventEmitter.removeAllListeners()}applyScanSettings(e){this.scanSettings=e;blurryRecognitionPreloader.updateBlurryRecognitionPriority(this.scanSettings);const t=blurryRecognitionPreloader.getEnabledSymbologies(this.scanSettings);this.blurryRecognitionAvailable=blurryRecognitionPreloader.isBlurryRecognitionAvailable(this.scanSettings);this.dataCaptureWorker.postMessage({type:"scan-settings",settings:this.scanSettings.toJSONString(),blurryRecognitionAvailable:this.blurryRecognitionAvailable,blurryRecognitionRequiresUpdate:t.some(e=>!this.activeBlurryRecognitionSymbologies.has(e))});const r=this.scanSettings.getDeviceName();if(r!=null){this.dataCaptureWorker.postMessage({type:"device-name",deviceName:r})}if(this.blurryRecognitionAvailable){this.activeBlurryRecognitionSymbologies=new Set([...this.activeBlurryRecognitionSymbologies,...t])}this.eventEmitter.emit("newScanSettings",this.scanSettings);return this}applyImageSettings(e){this.imageSettings=e;this.dataCaptureWorker.postMessage({type:"image-settings",imageSettings:e});return this}clearSession(){this.dataCaptureWorker.postMessage({type:"clear-session"});return this}async processImage(e,t=false){if(this.imageSettings==null){throw new CustomError({name:"NoImageSettings",message:"No image settings set up in the scanner"})}if(e instanceof HTMLImageElement){if(this.imageDataConversionContext==null){this.imageDataConversionContext=document.createElement("canvas").getContext("2d")}this.imageDataConversionContext.canvas.width=e.naturalWidth;this.imageDataConversionContext.canvas.height=e.naturalHeight;this.imageDataConversionContext.drawImage(e,0,0,e.naturalWidth,e.naturalHeight);e=new Uint8Array(this.imageDataConversionContext.getImageData(0,0,e.naturalWidth,e.naturalHeight).data.buffer)}let r;switch(this.imageSettings.format.valueOf()){case ImageSettings.Format.GRAY_8U:r=1;break;case ImageSettings.Format.RGB_8U:r=3;break;case ImageSettings.Format.RGBA_8U:r=4;break;default:r=1;break}if(this.imageSettings.width*this.imageSettings.height*r!==e.length){throw new CustomError({name:"ImageSettingsDataMismatch",message:"The provided image data doesn't match the previously set image settings"})}Scanner.workerScanRequestId++;this.workerScanQueueLength++;return new Promise((r,s)=>{const i=`workResult-${Scanner.workerScanRequestId}`;const a=`workError-${Scanner.workerScanRequestId}`;this.eventEmitter.once(i,(e,t)=>{this.eventEmitter.removeAllListeners(a);this.workerScanQueueLength--;r(new ScanResult(e.barcodes,e.texts,t,this.imageSettings))});this.eventEmitter.once(a,(e,t)=>{Logger.log(Logger.Level.ERROR,`Scandit Data Capture error (${e.errorCode}):`,e.errorMessage);this.eventEmitter.removeAllListeners(i);this.workerScanQueueLength--;const r=new CustomError({name:"ScanditEngineError",message:`${e.errorMessage} (${e.errorCode})`});s(r)});this.dataCaptureWorker.postMessage({type:"scan-image",requestId:Scanner.workerScanRequestId,data:e,highQualitySingleFrameMode:t},[e.buffer])})}isBusyProcessing(){return this.workerScanQueueLength!==0}isReady(){return this.isReadyToWork}on(e,t){if(e==="ready"){if(this.isReadyToWork){t()}else{this.eventEmitter.once(e,t,this)}}else if(e==="contextCreated"){if(this.licenseKeyFeatures!=null){t(this.licenseKeyFeatures)}else{this.eventEmitter.once(e,t,this)}}else{this.eventEmitter.on(e,t,this)}return this}addListener(e,t){return this.on(e,t)}createParserForFormat(e){return new Parser(this,e)}getImageSettings(){return this.imageSettings}getScanSettings(){return this.scanSettings}async parse(e,t,r){this.workerParseRequestId++;return new Promise((s,i)=>{const a=`parseResult-${this.workerParseRequestId}`;const n=`parseError-${this.workerParseRequestId}`;this.eventEmitter.once(a,e=>{this.eventEmitter.removeAllListeners(n);const t={jsonString:e,fields:[],fieldsByName:{}};JSON.parse(e).forEach(e=>{t.fields.push(e);t.fieldsByName[e.name]=e});s(t)});this.eventEmitter.once(n,e=>{Logger.log(Logger.Level.ERROR,`Scandit Data Capture error (${e.errorCode}):`,e.errorMessage);this.eventEmitter.removeAllListeners(a);const t=new CustomError({name:"ScanditEngineError",message:`${e.errorMessage} (${e.errorCode})`});i(t)});this.dataCaptureWorker.postMessage({type:"parse",requestId:this.workerParseRequestId,dataFormat:e,data:t,options:r==null?"{}":JSON.stringify(r)})})}reportCameraProperties(e,t=true){this.dataCaptureWorker.postMessage({type:"camera-properties",cameraType:e,autofocus:t});return this}removeListener(e,t){this.eventEmitter.removeListener(e,t);return this}removeAllListeners(e){this.eventEmitter.removeAllListeners(e);return this}handleBlurryTablesUpdate(){if(this.blurryRecognitionAvailable){return}this.blurryRecognitionAvailable=blurryRecognitionPreloader.isBlurryRecognitionAvailable(this.scanSettings);if(this.blurryRecognitionAvailable){this.activeBlurryRecognitionSymbologies=new Set([...this.activeBlurryRecognitionSymbologies,...blurryRecognitionPreloader.getEnabledSymbologies(this.scanSettings)]);this.dataCaptureWorker.postMessage({type:"scan-settings",settings:this.scanSettings.toJSONString(),blurryRecognitionAvailable:true,blurryRecognitionRequiresUpdate:true})}}dataCaptureWorkerOnMessage(e){const t=e.data;if(t[0]==="log"){t[1].data.forEach((e,r)=>{if(e.name!=null&&e.message!=null){const s=new CustomError({name:e.name,message:e.message});s.stack=e.stack;t[1].data[r]=s}});Logger.log(t[1].level,...t[1].data);return}if(t[0]==="library-loaded"){this.isReadyToWork=true;this.eventEmitter.emit("ready");return}if(t[1]!=null){switch(t[0]){case"context-created":this.licenseKeyFeatures=t[1];this.eventEmitter.emit("contextCreated",this.licenseKeyFeatures);break;case"work-result":this.eventEmitter.emit(`workResult-${t[1].requestId}`,t[1].result,t[2]);break;case"work-error":this.eventEmitter.emit(`workError-${t[1].requestId}`,t[1].error,t[2]);break;case"parse-result":this.eventEmitter.emit(`parseResult-${t[1].requestId}`,t[1].result);break;case"parse-error":this.eventEmitter.emit(`parseError-${t[1].requestId}`,t[1].error);break;default:break}}}}