import{BrowserHelper}from"../browserHelper";import{Camera}from"../camera";import{CameraAccess}from"../cameraAccess";import{CameraSettings}from"../cameraSettings";import{CustomError}from"../customError";import{Logger}from"../logger";export var MeteringMode;(function(e){e["CONTINUOUS"]="continuous";e["MANUAL"]="manual";e["NONE"]="none";e["SINGLE_SHOT"]="single-shot"})(MeteringMode||(MeteringMode={}));export var CameraResolutionConstraint;(function(e){e[e["ULTRA_HD"]=0]="ULTRA_HD";e[e["FULL_HD"]=1]="FULL_HD";e[e["HD"]=2]="HD";e[e["SD"]=3]="SD";e[e["NONE"]=4]="NONE"})(CameraResolutionConstraint||(CameraResolutionConstraint={}));export class CameraManager{static cameraAccessTimeoutMs=4e3;static videoMetadataCheckTimeoutMs=4e3;static videoMetadataCheckIntervalMs=50;static getCapabilitiesTimeoutMs=500;static autofocusIntervalMs=1500;static manualToAutofocusResumeTimeoutMs=5e3;static manualFocusWaitTimeoutMs=400;static noCameraErrorParameters={name:"NoCameraAvailableError",message:"No camera available"};static notReadableErrorParameters={name:"NotReadableError",message:"Could not initialize camera correctly"};selectedCamera;activeCamera;activeCameraSettings;scanner;triggerCameraAccessError;gui;postStreamInitializationListener=this.postStreamInitialization.bind(this);videoResizeListener=this.videoResizeHandle.bind(this);videoTrackEndedListener=this.videoTrackEndedRecovery.bind(this);videoTrackMuteListener=this.videoTrackMuteRecovery.bind(this);triggerManualFocusListener=this.triggerManualFocus.bind(this);triggerZoomStartListener=this.triggerZoomStart.bind(this);triggerZoomMoveListener=this.triggerZoomMove.bind(this);cameraType;selectedCameraSettings;mediaStream;mediaTrackCapabilities;cameraAccessTimeout;cameraAccessRejectCallback;videoMetadataCheckInterval;getCapabilitiesTimeout;autofocusInterval;manualToAutofocusResumeTimeout;manualFocusWaitTimeout;cameraSwitcherEnabled;torchToggleEnabled;tapToFocusEnabled;pinchToZoomEnabled;pinchToZoomDistance;pinchToZoomInitialZoom;torchEnabled;cameraInitializationPromise;abortedCameraInitializationResolveCallback;cameraSetupPromise;constructor(e,t,a){this.scanner=e;this.triggerCameraAccessError=t;this.gui=a;this.cameraType=Camera.Type.BACK}setInteractionOptions(e,t,a,i){this.cameraSwitcherEnabled=e;this.torchToggleEnabled=t;this.tapToFocusEnabled=a;this.pinchToZoomEnabled=i}isCameraSwitcherEnabled(){return this.cameraSwitcherEnabled}async setCameraSwitcherEnabled(e){this.cameraSwitcherEnabled=e;if(this.cameraSwitcherEnabled){const e=await CameraAccess.getCameras();if(e.length>1){this.gui.setCameraSwitcherVisible(true)}}else{this.gui.setCameraSwitcherVisible(false)}}isTorchToggleEnabled(){return this.torchToggleEnabled}setTorchToggleEnabled(e){this.torchToggleEnabled=e;if(this.torchToggleEnabled){if(this.mediaStream!=null&&this.mediaTrackCapabilities?.torch===true){this.gui.setTorchTogglerVisible(true)}}else{this.gui.setTorchTogglerVisible(false)}}isTapToFocusEnabled(){return this.tapToFocusEnabled}setTapToFocusEnabled(e){this.tapToFocusEnabled=e;if(this.mediaStream!=null){if(this.tapToFocusEnabled){this.enableTapToFocusListeners()}else{this.disableTapToFocusListeners()}}}isPinchToZoomEnabled(){return this.pinchToZoomEnabled}setPinchToZoomEnabled(e){this.pinchToZoomEnabled=e;if(this.mediaStream!=null){if(this.pinchToZoomEnabled){this.enablePinchToZoomListeners()}else{this.disablePinchToZoomListeners()}}}setInitialCameraType(e){this.cameraType=e}async setCameraType(e){this.setInitialCameraType(e);const t=CameraAccess.getMainCameraForType(await CameraAccess.getCameras(),e);if(t!=null&&t!==this.selectedCamera){return this.initializeCameraWithSettings(t,this.selectedCameraSettings)}}setSelectedCamera(e){this.selectedCamera=e}setSelectedCameraSettings(e){this.selectedCameraSettings=e}async setupCameras(){if(this.cameraSetupPromise!=null){return this.cameraSetupPromise}this.cameraSetupPromise=this.setupCamerasAndStream();return this.cameraSetupPromise}async stopStream(e=false){if(this.activeCamera!=null){this.activeCamera.currentResolution=undefined}this.activeCamera=undefined;if(this.mediaStream!=null){Logger.log(Logger.Level.DEBUG,"Stop camera video stream access (stream):",this.mediaStream);window.clearTimeout(this.cameraAccessTimeout);window.clearInterval(this.videoMetadataCheckInterval);window.clearTimeout(this.getCapabilitiesTimeout);window.clearTimeout(this.manualFocusWaitTimeout);window.clearTimeout(this.manualToAutofocusResumeTimeout);window.clearInterval(this.autofocusInterval);this.gui.videoElement.pause();return new Promise(t=>{setTimeout(()=>{this.mediaStream?.getVideoTracks().forEach(e=>{e.removeEventListener("ended",this.videoTrackEndedListener);e.stop()});this.gui.videoElement.srcObject=null;this.mediaStream=undefined;this.mediaTrackCapabilities=undefined;if(!e){this.abortedCameraInitializationResolveCallback?.()}t()},0)})}}async applyCameraSettings(e){this.selectedCameraSettings=e;if(this.activeCamera==null){throw new CustomError(CameraManager.noCameraErrorParameters)}return this.initializeCameraWithSettings(this.activeCamera,e)}async reinitializeCamera(){if(this.activeCamera==null){Logger.log(Logger.Level.DEBUG,"Camera reinitialization delayed")}else{Logger.log(Logger.Level.DEBUG,"Reinitialize camera:",this.activeCamera);try{await this.initializeCameraWithSettings(this.activeCamera,this.activeCameraSettings)}catch(e){Logger.log(Logger.Level.WARN,"Couldn't access camera:",this.activeCamera,e);this.triggerCameraAccessError(e);throw e}}}async initializeCameraWithSettings(e,t){if(this.cameraInitializationPromise!=null){await this.cameraInitializationPromise}this.setSelectedCamera(e);this.selectedCameraSettings=this.activeCameraSettings=t;this.cameraInitializationPromise=this.initializeCameraAndCheckUpdatedSettings(e);return this.cameraInitializationPromise}async setTorchEnabled(e){if(this.mediaStream!=null&&this.mediaTrackCapabilities?.torch===true){this.torchEnabled=e;const t=this.mediaStream.getVideoTracks();if(t.length!==0&&typeof t[0].applyConstraints==="function"){await t[0].applyConstraints({advanced:[{torch:e}]})}}}async toggleTorch(){this.torchEnabled=!this.torchEnabled;await this.setTorchEnabled(this.torchEnabled)}async setZoom(e,t){if(this.mediaStream!=null&&this.mediaTrackCapabilities?.zoom!=null){const a=this.mediaStream.getVideoTracks();if(a.length!==0&&typeof a[0].applyConstraints==="function"){const i=this.mediaTrackCapabilities.zoom.max-this.mediaTrackCapabilities.zoom.min;const r=Math.max(this.mediaTrackCapabilities.zoom.min,Math.min((t??this.mediaTrackCapabilities.zoom.min)+i*e,this.mediaTrackCapabilities.zoom.max));await a[0].applyConstraints({advanced:[{zoom:r}]})}}}async recoverStreamIfNeeded(){const e=this.mediaStream?.getVideoTracks();if(e?.[0]?.readyState==="ended"){await this.reinitializeCamera()}}async setupCamerasAndStream(){try{let e;if(this.selectedCamera==null){this.gui.setVideoVisible(false);e=await this.accessInitialCamera()}const t=await CameraAccess.getCameras(false,true);if(this.cameraSwitcherEnabled&&t.length>1){this.gui.setCameraSwitcherVisible(true)}const a=this.mediaStream?.getVideoTracks()[0]?.getSettings?.().deviceId;if(this.mediaStream!=null&&e!=null){const i=t.length===1?t[0]:t.find(t=>t.deviceId===a||t.label!==""&&t.label===e?.label);if(i!=null){CameraAccess.adjustCameraFromMediaStream(this.mediaStream,i);if(BrowserHelper.isDesktopDevice()){CameraAccess.mainCameraForTypeOverridesOnDesktop.set(this.cameraType,i);CameraAccess.mainCameraForTypeOverridesOnDesktop.set(i.cameraType,i)}if(t.length===1||CameraAccess.getMainCameraForType(t,this.cameraType)===i){Logger.log(Logger.Level.DEBUG,"Initial camera access was correct (main camera), keep camera:",i);this.setSelectedCamera(i);this.updateActiveCameraCurrentResolution(i);await this.recoverStreamIfNeeded();return}else{Logger.log(Logger.Level.DEBUG,"Initial camera access was incorrect (not main camera), change camera",{...e,deviceId:a})}}else{Logger.log(Logger.Level.DEBUG,"Initial camera access was incorrect (unknown camera), change camera",{...e,deviceId:a})}}if(this.selectedCamera==null){return await this.accessAutoselectedCamera(t)}else{return await this.initializeCameraWithSettings(this.selectedCamera,this.selectedCameraSettings)}}finally{this.gui.setVideoVisible(true);this.cameraSetupPromise=undefined}}getInitialCameraResolutionConstraint(){let e;switch(this.activeCameraSettings?.resolutionPreference){case CameraSettings.ResolutionPreference.ULTRA_HD:e=CameraResolutionConstraint.ULTRA_HD;break;case CameraSettings.ResolutionPreference.FULL_HD:e=CameraResolutionConstraint.FULL_HD;break;case CameraSettings.ResolutionPreference.HD:default:e=CameraResolutionConstraint.HD;break}return e}async accessAutoselectedCamera(e){e=CameraAccess.sortCamerasForCameraType(e,this.cameraType);let t=e.shift();while(t!=null){try{return await this.initializeCameraWithSettings(t,this.selectedCameraSettings)}catch(a){this.setSelectedCamera();if(e.length===1){this.gui.setCameraSwitcherVisible(false)}if(e.length>=1){Logger.log(Logger.Level.WARN,"Couldn't access camera:",t,a);t=e.shift();continue}throw a}}throw new CustomError(CameraManager.noCameraErrorParameters)}async accessInitialCamera(){const e={deviceId:"",label:"",cameraType:this.cameraType};try{await this.initializeCameraWithSettings(e,this.selectedCameraSettings)}catch{}finally{this.setSelectedCamera()}return e}updateActiveCameraCurrentResolution(e){if(this.gui.videoElement.videoWidth>2&&this.gui.videoElement.videoHeight>2){e.currentResolution={width:this.gui.videoElement.videoWidth,height:this.gui.videoElement.videoHeight}}if(e.deviceId!==""){this.activeCamera=e;this.gui.setMirrorImageEnabled(this.gui.isMirrorImageEnabled(),false)}}postStreamInitialization(){window.clearTimeout(this.getCapabilitiesTimeout);this.getCapabilitiesTimeout=window.setTimeout(()=>{this.storeStreamCapabilities();this.setupAutofocus();if(this.torchToggleEnabled&&this.mediaStream!=null&&this.mediaTrackCapabilities?.torch===true){this.gui.setTorchTogglerVisible(true)}},CameraManager.getCapabilitiesTimeoutMs)}videoResizeHandle(){if(this.activeCamera!=null){this.updateActiveCameraCurrentResolution(this.activeCamera)}}async videoTrackEndedRecovery(){try{Logger.log(Logger.Level.DEBUG,'Detected video track "ended" event, try to reinitialize camera');await this.reinitializeCamera()}catch{}}async videoTrackMuteRecovery(e){if(this.gui.videoElement.onloadeddata!=null){Logger.log(Logger.Level.DEBUG,`Detected video track "${e.type}" event, delay video stream access detection`);this.setCameraAccessTimeout();return}const t=e.type==="mute";if(t!==this.gui.isCameraRecoveryVisible()){Logger.log(Logger.Level.DEBUG,`Detected video track "${e.type}" event, ${t?"enable":"disable"} camera recovery`);this.gui.setCameraRecoveryVisible(t)}}async triggerManualFocusForContinuous(){this.manualToAutofocusResumeTimeout=window.setTimeout(async()=>{await this.triggerFocusMode(MeteringMode.CONTINUOUS)},CameraManager.manualToAutofocusResumeTimeoutMs);await this.triggerFocusMode(MeteringMode.CONTINUOUS);this.manualFocusWaitTimeout=window.setTimeout(async()=>{await this.triggerFocusMode(MeteringMode.MANUAL)},CameraManager.manualFocusWaitTimeoutMs)}async triggerManualFocusForSingleShot(){window.clearInterval(this.autofocusInterval);this.manualToAutofocusResumeTimeout=window.setTimeout(()=>{this.autofocusInterval=window.setInterval(this.triggerAutoFocus.bind(this),CameraManager.autofocusIntervalMs)},CameraManager.manualToAutofocusResumeTimeoutMs);try{await this.triggerFocusMode(MeteringMode.SINGLE_SHOT)}catch{}}async triggerManualFocus(e){if(e!=null){e.preventDefault();if(e.type==="touchend"&&e.touches.length!==0){return}if(this.pinchToZoomDistance!=null){this.pinchToZoomDistance=undefined;return}}window.clearTimeout(this.manualFocusWaitTimeout);window.clearTimeout(this.manualToAutofocusResumeTimeout);if(this.mediaStream!=null&&this.mediaTrackCapabilities!=null){const e=this.mediaTrackCapabilities.focusMode;if(e instanceof Array&&e.includes(MeteringMode.SINGLE_SHOT)){if(e.includes(MeteringMode.CONTINUOUS)&&e.includes(MeteringMode.MANUAL)){await this.triggerManualFocusForContinuous()}else if(!e.includes(MeteringMode.CONTINUOUS)){await this.triggerManualFocusForSingleShot()}}}}triggerZoomStart(e){if(e?.touches.length!==2){return}e.preventDefault();this.pinchToZoomDistance=Math.hypot((e.touches[1].screenX-e.touches[0].screenX)/screen.width,(e.touches[1].screenY-e.touches[0].screenY)/screen.height);if(this.mediaStream!=null&&this.mediaTrackCapabilities?.zoom!=null){const e=this.mediaStream.getVideoTracks();if(e.length!==0&&typeof e[0].getConstraints==="function"){this.pinchToZoomInitialZoom=this.mediaTrackCapabilities.zoom.min;const t=e[0].getConstraints();if(t.advanced!=null){const e=t.advanced.find(e=>"zoom"in e);if(e?.zoom!=null){this.pinchToZoomInitialZoom=e.zoom}}}}}async triggerZoomMove(e){if(this.pinchToZoomDistance==null||e?.touches.length!==2){return}e.preventDefault();await this.setZoom((Math.hypot((e.touches[1].screenX-e.touches[0].screenX)/screen.width,(e.touches[1].screenY-e.touches[0].screenY)/screen.height)-this.pinchToZoomDistance)*2,this.pinchToZoomInitialZoom)}storeStreamCapabilities(){if(this.mediaStream!=null){const e=this.mediaStream.getVideoTracks();if(e.length!==0&&typeof e[0].getCapabilities==="function"){this.mediaTrackCapabilities=e[0].getCapabilities()}}if(this.activeCamera!=null){this.scanner.reportCameraProperties(this.activeCamera.cameraType,this.mediaTrackCapabilities?.focusMode==null||this.mediaTrackCapabilities.focusMode.includes(MeteringMode.CONTINUOUS))}}setupAutofocus(){window.clearTimeout(this.manualFocusWaitTimeout);window.clearTimeout(this.manualToAutofocusResumeTimeout);if(this.mediaStream!=null&&this.mediaTrackCapabilities!=null){const e=this.mediaTrackCapabilities.focusMode;if(e instanceof Array&&!e.includes(MeteringMode.CONTINUOUS)&&e.includes(MeteringMode.SINGLE_SHOT)){window.clearInterval(this.autofocusInterval);this.autofocusInterval=window.setInterval(this.triggerAutoFocus.bind(this),CameraManager.autofocusIntervalMs)}}}async triggerAutoFocus(){await this.triggerFocusMode(MeteringMode.SINGLE_SHOT)}async triggerFocusMode(e){if(this.mediaStream!=null){const t=this.mediaStream.getVideoTracks();if(t.length!==0&&typeof t[0].applyConstraints==="function"){try{await t[0].applyConstraints({advanced:[{focusMode:e}]})}catch{}}}}enableTapToFocusListeners(){["touchend","mousedown"].forEach(e=>{this.gui.videoElement.addEventListener(e,this.triggerManualFocusListener)})}enablePinchToZoomListeners(){this.gui.videoElement.addEventListener("touchstart",this.triggerZoomStartListener);this.gui.videoElement.addEventListener("touchmove",this.triggerZoomMoveListener)}disableTapToFocusListeners(){["touchend","mousedown"].forEach(e=>{this.gui.videoElement.removeEventListener(e,this.triggerManualFocusListener)})}disablePinchToZoomListeners(){this.gui.videoElement.removeEventListener("touchstart",this.triggerZoomStartListener);this.gui.videoElement.removeEventListener("touchmove",this.triggerZoomMoveListener)}async initializeCameraAndCheckUpdatedSettings(e){try{await this.initializeCamera(e);if(this.selectedCameraSettings!==this.activeCameraSettings&&(this.selectedCameraSettings==null||this.activeCameraSettings==null||Object.keys(this.selectedCameraSettings).some(e=>this.selectedCameraSettings[e]!==this.activeCameraSettings[e]))){this.activeCameraSettings=this.selectedCameraSettings;return await this.initializeCameraAndCheckUpdatedSettings(e)}}finally{this.cameraInitializationPromise=undefined}}async handleCameraInitializationError(e,t,a){if(!["OverconstrainedError","NotReadableError"].includes(a.name)||a.name==="NotReadableError"&&t===CameraResolutionConstraint.NONE){Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (unrecoverable error)",e,a);if(a.name!=="NotAllowedError"){CameraAccess.markCameraAsInaccessible(e)}throw a}if(a.name==="OverconstrainedError"&&t===CameraResolutionConstraint.NONE){if(e.deviceId===""){Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (no camera with such type error)",e,a);throw a}Logger.log(Logger.Level.DEBUG,"Detected non-existent deviceId error, attempt to find and reaccess updated camera",e,a);const t=e.deviceId;await CameraAccess.getCameras(true);if(t===e.deviceId){Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (updated camera not found after non-existent deviceId error)",e,a);CameraAccess.markCameraAsInaccessible(e);throw a}else{Logger.log(Logger.Level.DEBUG,"Updated camera found (recovered from non-existent deviceId error), attempt to access it",e);return this.initializeCamera(e)}}return this.initializeCamera(e,t+1)}async initializeCamera(e,t){this.gui.setCameraRecoveryVisible(false);if(e==null){throw new CustomError(CameraManager.noCameraErrorParameters)}await this.stopStream();this.torchEnabled=false;this.gui.setTorchTogglerVisible(false);t??=this.getInitialCameraResolutionConstraint();try{const a=await CameraAccess.accessCameraStream(t,e);Logger.log(Logger.Level.DEBUG,"Camera accessed, waiting for video stream start...");if(typeof a.getTracks()[0].getSettings==="function"){const i=a.getTracks()[0].getSettings();if(i.width!=null&&i.height!=null&&(i.width===2||i.height===2)){Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (invalid video metadata):",e);if(t===CameraResolutionConstraint.NONE){throw new CustomError(CameraManager.notReadableErrorParameters)}else{return this.initializeCamera(e,t+1)}}}this.mediaStream=a;this.mediaStream.getVideoTracks().forEach(e=>{e.addEventListener("ended",this.videoTrackEndedListener);e.addEventListener("mute",this.videoTrackMuteListener);e.addEventListener("unmute",this.videoTrackMuteListener)});try{await this.setupCameraStreamVideo(e,a)}catch(a){if(t===CameraResolutionConstraint.NONE){throw a}else{return this.initializeCamera(e,t+1)}}}catch(a){return this.handleCameraInitializationError(e,t,a)}}setCameraAccessTimeout(){window.clearTimeout(this.cameraAccessTimeout);this.cameraAccessTimeout=window.setTimeout(async()=>{await this.stopStream(true);this.cameraAccessRejectCallback?.(new CustomError(CameraManager.notReadableErrorParameters))},CameraManager.cameraAccessTimeoutMs)}checkCameraAccess(e){return new Promise((t,a)=>{this.cameraAccessRejectCallback=t=>{Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (video data load timeout):",e);this.gui.setCameraRecoveryVisible(true);a(t)};this.setCameraAccessTimeout()})}async checkVideoMetadata(e){return new Promise((t,a)=>{this.gui.videoElement.onloadeddata=()=>{this.gui.videoElement.onloadeddata=null;window.clearTimeout(this.cameraAccessTimeout);if(this.gui.videoElement.videoWidth>2&&this.gui.videoElement.videoHeight>2&&this.gui.videoElement.currentTime>0){this.updateActiveCameraCurrentResolution(e);Logger.log(Logger.Level.DEBUG,"Camera video stream access success:",e);return t()}const i=performance.now();window.clearInterval(this.videoMetadataCheckInterval);this.videoMetadataCheckInterval=window.setInterval(async()=>{if(this.gui.videoElement.videoWidth<=2||this.gui.videoElement.videoHeight<=2||this.gui.videoElement.currentTime===0){if(performance.now()-i>CameraManager.videoMetadataCheckTimeoutMs){Logger.log(Logger.Level.DEBUG,"Camera video stream access failure (valid video metadata timeout):",e);window.clearInterval(this.videoMetadataCheckInterval);await this.stopStream(true);return a(new CustomError(CameraManager.notReadableErrorParameters))}return}window.clearInterval(this.videoMetadataCheckInterval);this.updateActiveCameraCurrentResolution(e);Logger.log(Logger.Level.DEBUG,"Camera video stream access success:",e);t()},CameraManager.videoMetadataCheckIntervalMs)}})}setupCameraStreamVideo(e,t){this.gui.videoElement.addEventListener("loadedmetadata",this.postStreamInitializationListener);this.gui.videoElement.addEventListener("resize",this.videoResizeListener);if(this.tapToFocusEnabled){this.enableTapToFocusListeners()}if(this.pinchToZoomEnabled){this.enablePinchToZoomListeners()}const a=Promise.race([this.checkCameraAccess(e),this.checkVideoMetadata(e),new Promise(e=>{this.abortedCameraInitializationResolveCallback=e})]);this.gui.videoElement.srcObject=t;this.gui.videoElement.load();this.gui.playVideo();this.scanner.reportCameraProperties(e.cameraType);return a}}