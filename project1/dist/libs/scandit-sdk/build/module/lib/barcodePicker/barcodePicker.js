import{EventEmitter}from"eventemitter3";import{Howl,Howler}from"howler/dist/howler.core.min.js";import{beepSound}from"../assets/base64assets";import{configurePhase}from"../../index";import{BrowserHelper}from"../browserHelper";import{Camera}from"../camera";import{CustomError}from"../customError";import{Logger}from"../logger";import{Scanner}from"../scanner";import{ScanResult}from"../scanResult";import{ScanSettings}from"../scanSettings";import{SingleImageModeSettings}from"../singleImageModeSettings";import{UnsupportedBrowserError}from"../unsupportedBrowserError";import{CameraManager}from"./cameraManager";import{DummyCameraManager}from"./dummyCameraManager";import{GUI}from"./gui";class BarcodePickerEventEmitter extends EventEmitter{}
/**
 * A barcode picker element used to get and show camera input and perform scanning operations.
 *
 * The barcode picker will automatically fit and scale inside the given *originElement*.
 *
 * Each barcode picker internally contains a [[Scanner]] object with its own WebWorker thread running a
 * separate copy of the external Scandit Data Capture library. To optimize loading times and performance it's
 * recommended to reuse the same picker and to already create the picker in advance (hidden) and just
 * display it when needed whenever possible.
 *
 * As the loading of the external Scandit Data Capture library can take some time, the picker always starts inactive
 * (but showing GUI and video) and then activates, if not paused, as soon as the library is ready to scan.
 * The [[on]] method targeting the [[ready]] event can be used to set up a listener function to be called when the
 * library is loaded. The picker will be ready to start scanning when the library is fully loaded.
 *
 * By default the external Scandit Data Capture library is preloaded in order to reduce the initialization time as much
 * as possible.
 *
 * The picker can also operate in Single Image Mode: letting the user click/tap to take a single image to be scanned
 * via the camera (mobile) or a file select dialog (desktop). This is provided automatically as fallback by
 * default when the OS/browser only supports part of the needed features and cannot provide direct access to the camera
 * for video streaming and continuous scanning, or can also be forced on/off. This behaviour can be set up on creation
 * via the *singleImageModeSettings* option. Note that in this mode some of the functions provided by the picker will
 * have no effect.
 *
 * By default an alert is shown if an internal error during scanning is encountered which prevents the scanning
 * procedure from continuing when running on a local IP address. As this uses the built-in [[scanError]] event
 * functionality, if unwanted it can be disabled by calling [[removeAllListeners]] on the BarcodePicker
 * instance (right after creation).
 *
 * In accordance with our license terms, the Scandit logo displayed in the bottom right corner of the barcode picker
 * must be displayed and cannot be hidden by any method. Workarounds are not allowed.
 */export class BarcodePicker{cameraManager;gui;eventEmitter;scanner;beepSound;vibrateFunction;scannerReadyEventListener;playSoundOnScan;vibrateOnScan;scanningPaused;latestVideoTimeProcessed;destroyed;isReadyToWork;cameraAccess;targetScanningFPS;averageProcessingTime;externalImageData;internalImageData;constructor(e,{visible:a,singleImageModeEnabled:t,singleImageModeSettings:r,playSoundOnScan:i,vibrateOnScan:s,scanningPaused:n,guiStyle:c,videoFit:o,cameraRecoveryText:m,laserArea:g,viewfinderArea:h,scanner:l,scanSettings:u,cameraType:d,targetScanningFPS:S,hideLogo:p}){this.isReadyToWork=false;this.destroyed=false;this.scanningPaused=n;Howler.autoSuspend=false;this.beepSound=new Howl({src:beepSound});this.vibrateFunction=navigator.vibrate??navigator.webkitVibrate??navigator.mozVibrate??navigator.msVibrate;this.eventEmitter=new EventEmitter;this.setPlaySoundOnScanEnabled(i);this.setVibrateOnScanEnabled(s);this.setTargetScanningFPS(S);this.scanner=l?.applyScanSettings(u)??new Scanner({scanSettings:u});this.scannerReadyEventListener=this.handleScannerReady.bind(this);this.scanner.on("ready",this.scannerReadyEventListener);this.gui=new GUI({scanner:this.scanner,originElement:e,singleImageModeEnabled:t,singleImageModeSettings:r,scanningPaused:n,visible:a,guiStyle:c,videoFit:o,hideLogo:p,cameraRecoveryText:m,laserArea:g,viewfinderArea:h,cameraUploadCallback:this.processVideoFrame.bind(this,true)});if(t){this.cameraManager=new DummyCameraManager(this.scanner,this.triggerCameraAccessError.bind(this),this.gui);this.gui.setCameraType(d)}else{this.cameraManager=new CameraManager(this.scanner,this.triggerCameraAccessError.bind(this),this.gui);this.scheduleVideoProcessing()}this.gui.setCameraManager(this.cameraManager)}static ready(){}static submitFrame(e){}static processFrame(e){}static scan(e){}static scanError(e){}static cameraAccessError(e){}static async create(e,{visible:a=true,singleImageModeSettings:t={},playSoundOnScan:r=false,vibrateOnScan:i=false,scanningPaused:s=false,guiStyle:n=BarcodePicker.GuiStyle.LASER,videoFit:c=BarcodePicker.ObjectFit.CONTAIN,cameraRecoveryText:o="Tap/click to resume scanning",laserArea:m,viewfinderArea:g,scanner:h,scanSettings:l=new ScanSettings,enableCameraSwitcher:u=true,enableTorchToggle:d=true,enableTapToFocus:S=true,enablePinchToZoom:p=true,accessCamera:b=true,camera:f,cameraType:y=Camera.Type.BACK,cameraSettings:E,targetScanningFPS:v=30,hideLogo:w=false}={}){const T=BrowserHelper.userAgentInfo.getDevice().type;const P=T==="mobile"||T==="tablet";const M=(P?t.mobile:t.desktop)??{};const C=M.usageStrategy===SingleImageModeSettings.UsageStrategy.NEVER;const I=M.usageStrategy===SingleImageModeSettings.UsageStrategy.ALWAYS;const A=BrowserHelper.checkBrowserCompatibility();if(!A.scannerSupport||C&&!A.fullSupport){throw new UnsupportedBrowserError(A)}if(!A.fullSupport&&!I){Logger.log(Logger.Level.INFO,"BarcodePicker's Single Image Mode is being used as fallback as the OS/browser combination doesn't "+"support camera video stream scanning (https://caniuse.com/#feat=stream). "+'You can configure this behaviour via the "singleImageModeSettings" option.',A)}if(configurePhase!=="done"){throw new CustomError({name:"LibraryNotConfiguredError",message:configurePhase==="started"?`The library has not completed its configuration yet, please call 'configure' and wait for the returned\n              promise's resolution`:`The library was not configured, 'configure' must be called with valid parameters before instantiating\n              the BarcodePicker`})}if(!BrowserHelper.isValidHTMLElement(e)){throw new CustomError({name:"NoOriginElementError",message:"A valid origin HTML element must be given"})}const F=new BarcodePicker(e,{visible:a,singleImageModeEnabled:A.fullSupport?I:true,singleImageModeSettings:M,playSoundOnScan:r,vibrateOnScan:i,scanningPaused:s,guiStyle:n,videoFit:c,cameraRecoveryText:o,laserArea:m,viewfinderArea:g,scanner:h,scanSettings:l,cameraType:y,targetScanningFPS:v,hideLogo:w});F.cameraManager.setInteractionOptions(u,d,S,p);F.cameraManager.setInitialCameraType(y);F.cameraManager.setSelectedCamera(f);F.cameraManager.setSelectedCameraSettings(E);F.cameraAccess=b;F.on("scanError",e=>{if(["localhost","127.0.0.1",""].includes(window.location.hostname)){alert(e)}});if(b){await F.cameraManager.setupCameras()}return F}destroy(e=true){this.pauseScanning(true);this.scanner.removeListener("ready",this.scannerReadyEventListener);this.destroyed=true;if(e){this.scanner.destroy()}this.gui.destroy();this.eventEmitter.removeAllListeners()}applyScanSettings(e){this.scanner.applyScanSettings(e);return this}isScanningPaused(){return this.scanningPaused}pauseScanning(e=false){this.scanningPaused=true;if(e){this.cameraManager.stopStream().catch(()=>{})}if(this.scanner.isReady()){this.gui.pauseScanning()}return this}async resumeScanning(){this.scanningPaused=false;if(this.scanner.isReady()){this.gui.resumeScanning()}if(this.cameraAccess&&this.getActiveCamera()==null){await this.cameraManager.setupCameras()}return this}getActiveCamera(){return this.cameraManager.activeCamera}async setActiveCamera(e,a){if(e==null||!this.cameraAccess){this.cameraManager.setSelectedCamera(e);this.cameraManager.setSelectedCameraSettings(a);if(this.cameraAccess){await this.cameraManager.setupCameras()}}else{await this.cameraManager.initializeCameraWithSettings(e,a)}return this}async setCameraType(e){this.gui.setCameraType(e);if(this.cameraAccess){await this.cameraManager.setCameraType(e)}else{this.cameraManager.setInitialCameraType(e)}return this}async applyCameraSettings(e){if(!this.cameraAccess){this.cameraManager.setSelectedCameraSettings(e)}else{await this.cameraManager.applyCameraSettings(e)}return this}isVisible(){return this.gui.isVisible()}setVisible(e){this.gui.setVisible(e);return this}isMirrorImageEnabled(){return this.gui.isMirrorImageEnabled()}setMirrorImageEnabled(e){this.gui.setMirrorImageEnabled(e,true);return this}isPlaySoundOnScanEnabled(){return this.playSoundOnScan}setPlaySoundOnScanEnabled(e){this.playSoundOnScan=e;return this}isVibrateOnScanEnabled(){return this.vibrateOnScan}setVibrateOnScanEnabled(e){this.vibrateOnScan=e;return this}isCameraSwitcherEnabled(){return this.cameraManager.isCameraSwitcherEnabled()}setCameraSwitcherEnabled(e){this.cameraManager.setCameraSwitcherEnabled(e).catch(()=>{});return this}isTorchToggleEnabled(){return this.cameraManager.isTorchToggleEnabled()}setTorchToggleEnabled(e){this.cameraManager.setTorchToggleEnabled(e);return this}isTapToFocusEnabled(){return this.cameraManager.isTapToFocusEnabled()}setTapToFocusEnabled(e){this.cameraManager.setTapToFocusEnabled(e);return this}isPinchToZoomEnabled(){return this.cameraManager.isPinchToZoomEnabled()}setPinchToZoomEnabled(e){this.cameraManager.setPinchToZoomEnabled(e);return this}async setTorchEnabled(e){await this.cameraManager.setTorchEnabled(e);return this}async setZoom(e){await this.cameraManager.setZoom(e);return this}isReady(){return this.isReadyToWork}on(e,a,t=false){if(e==="ready"){if(this.isReadyToWork){a()}else{this.eventEmitter.once(e,a,this)}}else{if(t===true){this.eventEmitter.once(e,a,this)}else{this.eventEmitter.on(e,a,this)}}return this}removeListener(e,a){this.eventEmitter.removeListener(e,a);return this}removeAllListeners(e){this.eventEmitter.removeAllListeners(e);return this}addListener(e,a,t){return this.on(e,a,t)}setGuiStyle(e){this.gui.setGuiStyle(e);return this}setVideoFit(e){this.gui.setVideoFit(e);return this}async accessCamera(){if(!this.cameraAccess||this.getActiveCamera()==null){await this.cameraManager.setupCameras();this.cameraAccess=true}return this}createParserForFormat(e){return this.scanner.createParserForFormat(e)}reassignOriginElement(e){if(!BrowserHelper.isValidHTMLElement(e)){throw new CustomError({name:"NoOriginElementError",message:"A valid origin HTML element must be given"})}this.gui.reassignOriginElement(e);return this}setTargetScanningFPS(e){if(e<=0){e=30}this.targetScanningFPS=e;return this}getScanner(){return this.scanner}clearSession(){this.scanner.clearSession();return this}setLaserArea(e){this.gui.setLaserArea(e);return this}setViewfinderArea(e){this.gui.setViewfinderArea(e);return this}pauseCameraAccess(){this.cameraAccess=false;this.cameraManager.stopStream().catch(()=>{});return this}triggerCameraAccessError(e){this.eventEmitter.emit("cameraAccessError",e)}handleScanResult(e){e.imageData=this.externalImageData;this.eventEmitter.emit("processFrame",e);if(e.barcodes.length!==0||e.texts.length!==0){this.eventEmitter.once("scan",()=>{const a=e.barcodes.some(a=>!e.rejectedCodes.has(a));const t=e.texts.some(a=>!e.rejectedTexts.has(a));if(a||t){this.gui.flashGUI();if(this.playSoundOnScan){this.beepSound.play()}if(this.vibrateOnScan){this.vibrateFunction?.call(navigator,300)}}});this.eventEmitter.emit("scan",e)}}scheduleVideoProcessing(e=0){window.setTimeout(async()=>{await this.videoProcessing()},e)}async scheduleNextVideoProcessing(e){if(this.targetScanningFPS<60){if(this.averageProcessingTime==null){this.averageProcessingTime=performance.now()-e}else{this.averageProcessingTime=this.averageProcessingTime*.9+(performance.now()-e)*.1}const a=Math.max(0,1e3/this.targetScanningFPS-this.averageProcessingTime);if(Math.round(a)<=16){await this.videoProcessing()}else{this.scheduleVideoProcessing(a)}}else{await this.videoProcessing()}}async processVideoFrame(e){this.internalImageData=this.gui.getImageData(this.internalImageData);if(this.internalImageData==null){return}if(this.externalImageData==null||this.externalImageData.byteLength===0||this.externalImageData.byteLength!==this.internalImageData.byteLength){this.externalImageData=new Uint8Array(this.internalImageData)}else{this.externalImageData.set(this.internalImageData)}if(!this.scanningPaused){if(this.eventEmitter.listenerCount("submitFrame")>0){this.eventEmitter.emit("submitFrame",new ScanResult([],[],this.externalImageData,this.scanner.getImageSettings()))}try{const a=await this.scanner.processImage(this.internalImageData,e);this.internalImageData=a.imageData;if(!this.scanningPaused){this.handleScanResult(a)}}catch(e){this.internalImageData=undefined;if(e.name==="ImageSettingsDataMismatch"){return}this.pauseScanning();this.eventEmitter.emit("scanError",e)}}}async videoProcessing(){if(this.destroyed){return}if(this.getActiveCamera()?.currentResolution==null||this.scanningPaused||!this.scanner.isReady()||this.scanner.isBusyProcessing()||this.latestVideoTimeProcessed===this.gui.getVideoCurrentTime()){this.scheduleVideoProcessing();return}if(this.latestVideoTimeProcessed==null){await this.resumeScanning()}const e=performance.now();this.latestVideoTimeProcessed=this.gui.getVideoCurrentTime();await this.processVideoFrame(false);await this.scheduleNextVideoProcessing(e)}handleScannerReady(){this.isReadyToWork=true;this.eventEmitter.emit("ready")}}(function(e){let a;(function(e){
/**
         * No GUI is shown to indicate where the barcode/text should be placed.
         * Be aware that the Scandit logo continues to be displayed as showing it is part of the license agreement.
         */
e["NONE"]="none";e["LASER"]="laser";e["VIEWFINDER"]="viewfinder"})(a=e.GuiStyle||(e.GuiStyle={}));let t;(function(e){e["CONTAIN"]="contain";e["COVER"]="cover"})(t=e.ObjectFit||(e.ObjectFit={}))})(BarcodePicker||(BarcodePicker={}));